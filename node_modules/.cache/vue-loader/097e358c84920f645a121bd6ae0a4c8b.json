{"remainingRequest":"/home/runner/work/CF2_228142/CF2_228142/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF2_228142/CF2_228142/src/views/Tema4.vue?vue&type=template&id=cffefde4&lang=pug","dependencies":[{"path":"/home/runner/work/CF2_228142/CF2_228142/src/views/Tema4.vue","mtime":1733885384742},{"path":"/home/runner/work/CF2_228142/CF2_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228142/CF2_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228142/CF2_228142/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF2_228142/CF2_228142/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228142/CF2_228142/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228142/CF2_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228142/CF2_228142/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDQKICAgICAgaDEgU2VndXJpZGFkIHkgYnVlbmFzIHByw6FjdGljYXMKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgIC5jb2wtbGctYXV0by5wdC1sZy0wLnB0LW1kLTQKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80MC5wbmcnIGFsdD0nJykKICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICBwLm1iLTAgTGEgc2VndXJpZGFkIHkgbGFzIGJ1ZW5hcyBwcsOhY3RpY2FzIHNvbiBhc3BlY3RvcyBmdW5kYW1lbnRhbGVzIGVuIGxhIGluc3RhbGFjacOzbiBkZSB1biBzaXN0ZW1hIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkby4gSW1wbGVtZW50YXIgbm9ybWFzIGRlIHNlZ3VyaWRhZCB5IHByb2NlZGltaWVudG9zIGFkZWN1YWRvcywgZ2FyYW50aXphIGxhIGludGVncmlkYWQgZGVsIGVxdWlwbyBkZSB0cmFiYWpvLCBhc2VndXJhIGxhIGR1cmFiaWxpZGFkIHkgZWwgZnVuY2lvbmFtaWVudG8gw7NwdGltbyBkZWwgc2lzdGVtYSBkZSBjYWJsZWFkby4gRXN0ZSBhcGFydGFkbyBhYm9yZGEgdGFudG8gbGFzIG5vcm1hcyBkZSBzZWd1cmlkYWQgZXNwZWPDrWZpY2FzIHBhcmEgbGEgaW5zdGFsYWNpw7NuIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyBjb21vIGxhcyBwcsOhY3RpY2FzIHF1ZSBkZWJlbiBzZWd1aXJzZSBwYXJhIGdlc3Rpb25hciBsb3Mgcmllc2dvcyB5IG1hbnRlbmVyIHVuIGNvbnRyb2wgZGUgY2FsaWRhZCBjb250aW51by4KICAgICAgLmNvbC1sZy1hdXRvLnB0LWxnLTAucHQtbWQtNAogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQxLnBuZycgYWx0PScnKSAgCgoKICAgIFNlcGFyYWRvciAKICAgICN0XzRfMS50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDQuMSBOb3JtYXMgZGUgc2VndXJpZGFkIGVuIGluc3RhbGFjacOzbgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLWF1dG8ucHQtbGctMC5wdC1tZC00CiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDIucG5nJyBhbHQ9JycpCiAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgcC5tYi0wIExhcyBub3JtYXMgZGUgc2VndXJpZGFkIGVuIGxhIGluc3RhbGFjacOzbiBkZSBjYWJsZWFkbyBlc3RydWN0dXJhZG8gY29udHJpYnV5ZW4gYWwgcHJldmVuaXIgYWNjaWRlbnRlcyB5IGdhcmFudGl6YXIgdW4gYW1iaWVudGUgc2VndXJvIHBhcmEgbG9zIHTDqWNuaWNvcywgYWRlbcOhcyBkZSBwcm90ZWdlciBsYSBpbmZyYWVzdHJ1Y3R1cmEuIExhIGFwbGljYWNpw7NuIGRlIGVzdGFzIG5vcm1hcyBlcyBmdW5kYW1lbnRhbCBlbiBjYWRhIGV0YXBhIGRlbCBwcm9jZXNvLCBkZXNkZSBsYSBwcmVwYXJhY2nDs24gZGVsIHNpdGlvIGhhc3RhIGxhIGltcGxlbWVudGFjacOzbiB5IGVsIG1hbnRlbmltaWVudG8gZGUgbG9zIGNvbXBvbmVudGVzIGRlbCBzaXN0ZW1hLiAgICAgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctMTAKICAgICAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgICAgICBoNSBUYWJsYSAyLiAKICAgICAgICAgIHNwYW4gTm9ybWFzIGRlIFNlZ3VyaWRhZAoKICAgICAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcy50ZXh0LWNlbnRlci5tYi01CiAgICAgICAgICB0YWJsZQogICAgICAgICAgICBjYXB0aW9uIEZ1ZW50ZTogT0lULCAyMDI0LgogICAgICAgICAgICB0aGVhZAogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0aCBDb21wb25lbnRlcyBkZSBzZWd1cmlkYWQKICAgICAgICAgICAgICAgIHRoIENvbnNpZGVyYWNpb25lcyBmdW5kYW1lbnRhbGVzCgogICAgICAgICAgICB0Ym9keQogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZC5mYXN0LWJvbGQuYmd0MSBQcm90ZWNjacOzbiBwZXJzb25hbCB5IGVxdWlwbyBkZSB0cmFiYWpvIAogICAgICAgICAgICAgICAgdGQgVG9kbyBlbCBwZXJzb25hbCBpbnZvbHVjcmFkbyBlbiBsYSBpbnN0YWxhY2nDs24gZGViZSB1dGlsaXphciBlcXVpcG8gZGUgcHJvdGVjY2nDs24gcGVyc29uYWwgYWRlY3VhZG8sIGNvbW8gZ3VhbnRlcyBhaXNsYW50ZXMsIGdhZmFzIGRlIHNlZ3VyaWRhZCwgeSBlbiBhbGd1bm9zIGNhc29zLCBjYXNjb3MgeSBwcm90ZWN0b3JlcyBhdWRpdGl2b3MsIGVzcGVjaWFsbWVudGUgY3VhbmRvIHNlIHRyYWJhamEgZW4gc2l0aW9zIGRlIGNvbnN0cnVjY2nDs24gbyBlbiDDoXJlYXMgZGUgYWx0byByaWVzZ28uIEFkZW3DoXMsIGVzIGltcG9ydGFudGUgcXVlIGxvcyB0w6ljbmljb3MgdXRpbGljZW4gaGVycmFtaWVudGFzIHkgZXF1aXBvcyBkZSB0cmFiYWpvIHNlZ3Vyb3MgeSBlbiBidWVuIGVzdGFkbyBwYXJhIGV2aXRhciBhY2NpZGVudGVzLgogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZC5mYXN0LWJvbGQuYmd0MSBNYW5lam8gZGUgZWxlY3RyaWNpZGFkIHkgY2lyY3VpdG9zCiAgICAgICAgICAgICAgICB0ZCBEZWJpZG8gYSBxdWUgbGEgaW5zdGFsYWNpw7NuIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyBhIG1lbnVkbyBpbmNsdXllIGNvbmV4aW9uZXMgY29uIGZ1ZW50ZXMgZGUgZW5lcmfDrWEsIHNlIGhhY2UgbmVjZXNhcmlvIGFwbGljYXIgbGFzIG5vcm1hcyBkZSBtYW5lam8gc2VndXJvIGRlIGVsZWN0cmljaWRhZC4gRXN0byBpbXBsaWNhIGRlc2NvbmVjdGFyIGxhIGZ1ZW50ZSBkZSBlbmVyZ8OtYSBhbCB0cmFiYWphciBlbiBjb25leGlvbmVzIGVsw6ljdHJpY2FzIHkgdmVyaWZpY2FyIGxhIGF1c2VuY2lhIGRlIGNvcnJpZW50ZSBhbnRlcyBkZSByZWFsaXphciBjdWFscXVpZXIgYWp1c3RlIG8gbWFudGVuaW1pZW50by4gU2UgZGViZW4gc2VndWlyIGxhcyBub3JtYXRpdmFzIGVzdGFibGVjaWRhcywgY29tbyBlbCBSRVRJRSAoUmVnbGFtZW50byBUw6ljbmljbyBkZSBJbnN0YWxhY2lvbmVzIEVsw6ljdHJpY2FzKSwgcXVlIHByb3BvcmNpb25hIGxpbmVhbWllbnRvcyBwYXJhIGxhIHNlZ3VyaWRhZCBlbMOpY3RyaWNhIGVuIGluc3RhbGFjaW9uZXMgZGUgY2FibGVhZG8gZW4gQ29sb21iaWEuICAKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQuZmFzdC1ib2xkLmJndDEgRXNwYWNpbyBjb25maW5hZG8geSB0cmFiYWpvcyBlbiBhbHR1cmEKICAgICAgICAgICAgICAgIHRkIEVuIGFsZ3Vub3MgY2Fzb3MsIGxhIGluc3RhbGFjacOzbiBkZSBjYWJsZWFkbyBlc3RydWN0dXJhZG8gcHVlZGUgaW1wbGljYXIgZWwgdHJhYmFqbyBlbiBlc3BhY2lvcyBjb25maW5hZG9zIG8gYSBncmFuIGFsdHVyYSwgY29tbyBjdWFuZG8gc2UgY29sb2NhbiBjYWJsZXMgZW4gdGVjaG9zIG8gZXNwYWNpb3MgZGUgZGlmw61jaWwgYWNjZXNvLiBFbiBlc3RvcyBjYXNvcywgc2UgZGViZW4gdXRpbGl6YXIgc2lzdGVtYXMgZGUgYW5jbGFqZSB5IGFybmVzZXMgZGUgc2VndXJpZGFkLCBhc8OtIGNvbW8gcHJvdG9jb2xvcyBkZSBtb25pdG9yZW8geSBhc2lzdGVuY2lhIHBhcmEgZXZpdGFyIGFjY2lkZW50ZXMgcG9yIGNhw61kYXMgbyBhc2ZpeGlhIGVuIGVzcGFjaW9zIGNlcnJhZG9zLiAKCiAgICBTZXBhcmFkb3IgCiAgICAjdF80XzIudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiA0LjIgR2VzdGnDs24gZGUgcmllc2dvcwoKICAgIHAubWItNCBMYSBnZXN0acOzbiBkZSByaWVzZ29zIGVzIGVsIHByb2Nlc28gZGUgaWRlbnRpZmljYWNpw7NuLCBldmFsdWFjacOzbiB5IG1pdGlnYWNpw7NuIGRlIHBvc2libGVzIHBlbGlncm9zIHF1ZSBwdWVkZW4gc3VyZ2lyIGR1cmFudGUgbGEgaW5zdGFsYWNpw7NuIHkgb3BlcmFjacOzbiBkZSB1biBzaXN0ZW1hIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkby4gVW5hIGFkZWN1YWRhIGdlc3Rpw7NuIGRlIHJpZXNnb3MgYXl1ZGEgYSBwcmV2ZW5pciBhY2NpZGVudGVzLCBjb250cmlidXllIGEgcmVkdWNpciBsb3MgdGllbXBvcyBkZSBpbmFjdGl2aWRhZCB5IGxvcyBjb3N0b3MgYWRpY2lvbmFsZXMgcXVlIHBvZHLDrWFuIHN1cmdpciBkZWJpZG8gYSBlcnJvcmVzIG8gaW5jaWRlbnRlcy4gICAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTQubXktMgogICAgICAgIC5iZ3QxLnAtNC5icmFkLmgtMTAwCiAgICAgICAgICBpbWcuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQzLnBuZycgYWx0PScnKQoKICAgICAgICAgIGg1Lm1iLTQgRXZhbHVhY2nDs24gZGUgcmllc2dvcyBlbiBlbCBzaXRpbyBkZSBpbnN0YWxhY2nDs246CgogICAgICAgICAgcC5tYi0wIEFudGVzIGRlIGluaWNpYXIgbGEgaW5zdGFsYWNpw7NuLCBlcyBmdW5kYW1lbnRhbCBsbGV2YXIgYSBjYWJvIHVuYSBldmFsdWFjacOzbiBkZSByaWVzZ29zIHBhcmEgaWRlbnRpZmljYXIgcG9zaWJsZXMgcGVsaWdyb3MsIGNvbW8gbGEgcHJlc2VuY2lhIGRlIHNpc3RlbWFzIGRlIGFsdGEgdGVuc2nDs24sIGVsIHJpZXNnbyBkZSBpbnRlcmZlcmVuY2lhIGVsZWN0cm9tYWduw6l0aWNhLCBvIMOhcmVhcyBkZSBhY2Nlc28gcmVzdHJpbmdpZG8uIEVzdGEgZXZhbHVhY2nDs24gcGVybWl0ZSBkZXRlcm1pbmFyIGxhcyBwcmVjYXVjaW9uZXMgZXNwZWPDrWZpY2FzIHF1ZSBzZSBkZWJlbiBhZG9wdGFyIGVuIGVsIGx1Z2FyIGRlIHRyYWJham8geSBwbGFuaWZpY2FyIGxhIGluc3RhbGFjacOzbiBjb24gYmFzZSBlbiB1biBhbsOhbGlzaXMgZGUgc2VndXJpZGFkLgogICAgICAuY29sLWxnLTQubXktMgogICAgICAgIC5iZzYucC00LmJyYWQuaC0xMDAKICAgICAgICAgIGltZy5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDQucG5nJyBhbHQ9JycpCgogICAgICAgICAgaDUubWItNCBNZWRpZGFzIHByZXZlbnRpdmFzOiAKICAgICAgICAgIHAubWItMCBVbmEgdmV6IGlkZW50aWZpY2Fkb3MgbG9zIHJpZXNnb3MsIHNlIGRlYmVuIGVzdGFibGVjZXIgbWVkaWRhcyBwcmV2ZW50aXZhcyBxdWUgbWluaW1pY2VuIGxhIHByb2JhYmlsaWRhZCBkZSBhY2NpZGVudGVzLiBFc3RhcyBtZWRpZGFzIHB1ZWRlbiBpbmNsdWlyIGxhIHNlcGFyYWNpw7NuIGRlIGNhYmxlcyBkZSBkYXRvcyB5IGVuZXJnw61hIHBhcmEgZXZpdGFyIGludGVyZmVyZW5jaWFzLCBsYSBpbXBsZW1lbnRhY2nDs24gZGUgc2XDsWFsaXphY2nDs24gcGFyYSDDoXJlYXMgZGUgcmllc2dvLCB5IGxhIGFzaWduYWNpw7NuIGRlIHJvbGVzIGRlIHN1cGVydmlzacOzbiBxdWUgZ2FyYW50aWNlbiBsYSBjb3JyZWN0YSBhcGxpY2FjacOzbiBkZSBsYXMgbm9ybWFzIGRlIHNlZ3VyaWRhZC4gICAgCgogICAgICAuY29sLWxnLTQubXktMgogICAgICAgIC5iZ3QxLnAtNC5icmFkLmgtMTAwCiAgICAgICAgICBpbWcuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ1LnBuZycgYWx0PScnKQoKICAgICAgICAgIGg1Lm1iLTQgQ2FwYWNpdGFjacOzbiB5IGNvbmNpZW5jaWFjacOzbiBkZWwgcGVyc29uYWw6IAogICAgICAgICAgcC5tYi0wIExhIGNhcGFjaXRhY2nDs24gZGUgbG9zIHTDqWNuaWNvcyB5IG9wZXJhcmlvcyBlbiBwcsOhY3RpY2FzIGRlIHNlZ3VyaWRhZCB5IG1hbmVqbyBkZSByaWVzZ29zIGVzIGZ1bmRhbWVudGFsIHBhcmEgcmVkdWNpciBlbCByaWVzZ28gZGUgYWNjaWRlbnRlcy4gRXN0byBpbmNsdXllIGZvcm1hY2nDs24gZW4gZWwgdXNvIGRlIGhlcnJhbWllbnRhcyB5IGVxdWlwb3MgZGUgcHJvdGVjY2nDs24sIGNvbm9jaW1pZW50byBkZSBsYXMgbm9ybWFzIGRlIHNlZ3VyaWRhZCB5IGhhYmlsaWRhZGVzIHBhcmEgaWRlbnRpZmljYXIgc2l0dWFjaW9uZXMgZGUgcmllc2dvLiBBZGVtw6FzLCBsb3MgdMOpY25pY29zIGRlYmVuIHNlciBjb25zY2llbnRlcyBkZSBsYSBpbXBvcnRhbmNpYSBkZSBzZWd1aXIgcHJvY2VkaW1pZW50b3MgZXN0YWJsZWNpZG9zIHkgZGUgY29tdW5pY2FyIGN1YWxxdWllciBpbmNpZGVudGUgbyBjb25kaWNpw7NuIGRlIHJpZXNnbyBkZSBpbm1lZGlhdG8uCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctMTAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYmcxLnAtNC5icmFkCiAgICAgICAgICAuY29sLWxnLWF1dG8uajEKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDYucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNC5qMQogICAgICAgICAgICBwLm1iLTAgTGEgZ2VzdGnDs24gZWZlY3RpdmEgZGUgcmllc2dvcyBlcyBiw6FzaWNhIHBhcmEgdW4gYW1iaWVudGUgZGUgdHJhYmFqbyBzZWd1cm8geSBnYXJhbnRpemEgcXVlIGVsIHNpc3RlbWEgZGUgY2FibGVhZG8gZXN0cnVjdHVyYWRvIHNlIGluc3RhbGUgZGUgZm9ybWEgb3JkZW5hZGEgeSBzaW4gY29udHJhdGllbXBvcy4KCiAgICBTZXBhcmFkb3IgCiAgICAjdF80XzMudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiA0LjMgQ29udHJvbCBkZSBjYWxpZGFkCgogICAgcC5tYi01IEVsIGNvbnRyb2wgZGUgY2FsaWRhZCBlbiBsYSBpbnN0YWxhY2nDs24gZGUgY2FibGVhZG8gZXN0cnVjdHVyYWRvIGFzZWd1cmEgcXVlIHRvZG9zIGxvcyBjb21wb25lbnRlcyB5IHByb2NlZGltaWVudG9zIGN1bXBsZW4gY29uIGxvcyBlc3TDoW5kYXJlcyBkZSByZW5kaW1pZW50byB5IGNvbiBsYXMgZXNwZWNpZmljYWNpb25lcyB0w6ljbmljYXMgZGVmaW5pZGFzIGVuIGVsIHByb3llY3RvLiBFc3RlIHByb2Nlc28gZXMgZnVuZGFtZW50YWwgcGFyYSBhc2VndXJhciBxdWUgZWwgc2lzdGVtYSBzZWEgZWZpY2llbnRlLCBzZWd1cm8geSBkZSBmw6FjaWwgbWFudGVuaW1pZW50bywgbG8gY3VhbCBwcm9sb25nYSBzdSB2aWRhIMO6dGlsIHkgcmVkdWNlIGxhIG5lY2VzaWRhZCBkZSByZXBhcmFjaW9uZXMuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQgIAogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDcucG5nJyBhbHQ9JycpICAKICAgICAgLmNvbC1sZy05Lm15LWxnLTAubXktMwogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIGJnMyIpCiAgICAgICAgICBkaXYodGl0dWxvPSJJbnNwZWNjacOzbiBkZSBtYXRlcmlhbGVzIHkgY29tcG9uZW50ZXMiKQogICAgICAgICAgICBwIEFudGVzIGRlIGluaWNpYXIgbGEgaW5zdGFsYWNpw7NuLCBzZSBkZWJlIHJldmlzYXIgcXVlIHRvZG9zIGxvcyBtYXRlcmlhbGVzIHkgY29tcG9uZW50ZXMgY3VtcGxhbiBjb24gbG9zIGVzdMOhbmRhcmVzIGRlIGNhbGlkYWQgZXN0YWJsZWNpZG9zLCB0YWxlcyBjb21vIGxhIGNhdGVnb3LDrWEgZGUgbG9zIGNhYmxlcywgbGEgY2FsaWRhZCBkZSBsb3MgY29uZWN0b3JlcyB5IGxhcyBjYXJhY3RlcsOtc3RpY2FzIGRlIGxvcyBwYW5lbGVzIGRlIGNvbmV4acOzbi4gTG9zIG1hdGVyaWFsZXMgZGVmZWN0dW9zb3MgbyBkZSBiYWphIGNhbGlkYWQgcHVlZGVuIGNvbXByb21ldGVyIGVsIHJlbmRpbWllbnRvIGRlbCBzaXN0ZW1hIHkgcmVzdWx0YXIgZW4gZmFsbG9zIGZ1dHVyb3MuCiAgICAgICAgICBkaXYodGl0dWxvPSJQcnVlYmFzIGRlIGluc3RhbGFjacOzbiB5IGZ1bmNpb25hbWllbnRvIikKICAgICAgICAgICAgcCBEdXJhbnRlIGxhIGluc3RhbGFjacOzbiwgc2UgZGViZW4gcmVhbGl6YXIgcHJ1ZWJhcyBwYXJjaWFsZXMgeSBjb250aW51YXMgcGFyYSBhc2VndXJhciBxdWUgY2FkYSBjb21wb25lbnRlIGN1bXBsZSBjb24gbG9zIGVzdMOhbmRhcmVzIGRlIGNhbGlkYWQuIFBvciBlamVtcGxvLCBhbCBpbnN0YWxhciBjYWJsZXMgZGUgcGFyIHRyZW56YWRvIG8gZmlicmEgw7NwdGljYSwgc2UgZGViZW4gdmVyaWZpY2FyIHBhcsOhbWV0cm9zIGRlIGNvbmV4acOzbiB5IGNvbnRpbnVpZGFkIHBhcmEgYXNlZ3VyYXJzZSBkZSBxdWUgbm8gaGF5YSBlcnJvcmVzIGVuIGxhcyBjb25leGlvbmVzLiBFbiBsYSBmYXNlIGZpbmFsLCBzZSByZWFsaXphbiBwcnVlYmFzIGRlIHJlbmRpbWllbnRvIHBhcmEgY29uZmlybWFyIHF1ZSBlbCBzaXN0ZW1hIGN1bXBsZSBjb24gbG9zIHJlcXVpc2l0b3MgZGUgYW5jaG8gZGUgYmFuZGEgeSBjYWxpZGFkIGRlIHNlw7FhbC4KICAgICAgICAgIGRpdih0aXR1bG89IkRvY3VtZW50YWNpw7NuIHkgcmVwb3J0ZXMgZGUgY2FsaWRhZCIpCiAgICAgICAgICAgIHAgRWwgY29udHJvbCBkZSBjYWxpZGFkIGluY2x1eWUgbGEgZG9jdW1lbnRhY2nDs24gZGV0YWxsYWRhIGRlIGNhZGEgcGFzbyBkZWwgcHJvY2VzbyBkZSBpbnN0YWxhY2nDs24sIGFzw60gY29tbyBsb3MgcmVzdWx0YWRvcyBkZSBsYXMgcHJ1ZWJhcyByZWFsaXphZGFzLiBFc3RhIGRvY3VtZW50YWNpw7NuIGVzIHZhbGlvc2EgdGFudG8gcGFyYSBsb3MgY2xpZW50ZXMgY29tbyBwYXJhIGVsIGVxdWlwbyBkZSBtYW50ZW5pbWllbnRvLCB5YSBxdWUgcHJvcG9yY2lvbmEgdW4gcmVnaXN0cm8gZGUgbGFzIGNvbmRpY2lvbmVzIGluaWNpYWxlcyBkZWwgc2lzdGVtYSB5IHBlcm1pdGUgcmVhbGl6YXIgZnV0dXJhcyBpbnNwZWNjaW9uZXMgbyBhbXBsaWFjaW9uZXMgY29uIG1heW9yIGZhY2lsaWRhZC4gTG9zIHJlcG9ydGVzIGRlIGNhbGlkYWQgZG9jdW1lbnRhbiBsb3MgcGFyw6FtZXRyb3MgZGUgcmVuZGltaWVudG8gYWxjYW56YWRvcyB5IHZhbGlkYW4gcXVlIGxhIGluc3RhbGFjacOzbiBoYSBzaWRvIHJlYWxpemFkYSBjb25mb3JtZSBhIGxvcyBlc3TDoW5kYXJlcy4KCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctMTAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYmcxLnAtNC5icmFkCiAgICAgICAgICAuY29sLWxnLWF1dG8uajEKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDgucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNC5qMQogICAgICAgICAgICBwLm1iLTAgRWwgY29udHJvbCBkZSBjYWxpZGFkIGFzZWd1cmEgcXVlIGVsIHNpc3RlbWEgZGUgY2FibGVhZG8gZXN0cnVjdHVyYWRvIGN1bXBsYSBjb24gbG9zIG9iamV0aXZvcyBkZSByZW5kaW1pZW50byB5IGZpYWJpbGlkYWQgZGVmaW5pZG9zIGVuIGVsIHByb3llY3RvLCB5IGZhY2lsaXRhIGVsIG1hbnRlbmltaWVudG8geSBwb3NpYmxlcyBhY3R1YWxpemFjaW9uZXMgZnV0dXJhcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCg=="},null]}